/// Module for testing the `movejs` command.
///
/// This module contains tests to verify the correct execution of the `movejs`
/// command, given that the required preliminary commands (`circuit`, `compile`)
/// are executed, and that the `movejs` command performs the expected file moving operations.
/// Additionally, it provides cleanup functionality to remove generated files and directories
/// after the test.

#[cfg(test)]
mod movejs_tests {
    use assert_cmd::Command;
    use std::{fs, path::Path};

    /// Tests the `movejs` command execution.
    ///
    /// This test ensures that the `movejs` command executes correctly,
    /// moving the files from the `circuit_js` folder to the current directory.
    /// It also verifies that the preliminary `circuit`, and `compile`
    /// commands are executed as required.
    #[test]
    fn test_movejs_command() {
        // Arrange: Ensure `circuit`, and `compile` commands are executed
        let current_dir = std::env::current_dir().unwrap();
        execute_preliminary_commands();

        // Act: Execute the `movejs` command
        let mut cmd = Command::cargo_bin(env!("CARGO_PKG_NAME")).unwrap();
        cmd.arg("movejs").assert().success();

        // Assert: Check that the expected files are moved
        assert_files_moved();

        // Clean up generated files and directories
        cleanup_files_and_dirs(&current_dir);
    }

    /// Executes the `circuit`, and `compile` commands.
    ///
    /// This function ensures that the preliminary `circuit`, and `compile`
    /// commands are executed successfully before testing the `movejs` command.
    fn execute_preliminary_commands() {
        let mut cmd = Command::cargo_bin(env!("CARGO_PKG_NAME")).unwrap();
        cmd.arg("circuit").assert().success();
        let mut cmd = Command::cargo_bin(env!("CARGO_PKG_NAME")).unwrap();
        cmd.arg("compile").assert().success();
    }

    /// Checks that the expected files are moved from `circuit_js` to the current directory.
    ///
    /// This function verifies that the expected files are moved
    /// by the `movejs` command.
    fn assert_files_moved() {
        let current_dir = std::env::current_dir().unwrap();
        let src_dir = current_dir.join("circuit_js");
        let files_to_check = vec![
            "circuit.circom",
            "circuit.r1cs",
            "circuit.sym",
            "circuit.wasm",
            "generate_witness.js",
            "witness_calculator.js",
        ];

        for file in &files_to_check {
            let src_path = src_dir.join(file);
            let dst_path = current_dir.join(file);

            // Check that the file exists in the destination directory
            assert!(
                dst_path.exists() && dst_path.is_file(),
                "File {} was not moved to the current directory",
                file
            );

            // Check that the file no longer exists in the source directory
            assert!(
                !src_path.exists(),
                "File {} still exists in the source directory",
                file
            );
        }
    }

    /// Cleans up the generated files and directories.
    ///
    /// This function deletes all the output files and directories generated during the test,
    /// to ensure a clean state for subsequent tests or runs.
    fn cleanup_files_and_dirs(dir: &Path) {
        // List of files generated by preliminary commands
        let output_files = vec![
            "circuit.circom",
            "circuit.r1cs",
            "circuit.sym",
            "circuit.wasm",
            "generate_witness.js",
            "witness_calculator.js",
        ];
        for file in output_files {
            let _ = fs::remove_file(file); // Ignore any deletion errors
        }
        // Also clean up any generated directories
        fs::remove_dir_all(dir.join("circuit_js")).unwrap();
    }
}
