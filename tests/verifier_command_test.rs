/// Module for testing the `verifier` command.
///
/// This module contains tests to verify the correct execution of the `verifier`
/// command, ensuring that the required preliminary commands (`circuit`, `compile`,
/// and `setup`) are executed, and that the `verifier` command produces the expected
/// output files. Additionally, it provides cleanup functionality to remove
/// generated files after the test.
#[cfg(test)]
mod verifier_tests {
    use assert_cmd::Command;
    use std::fs;
    use std::path::Path;

    /// Tests the `verifier` command execution.
    ///
    /// This test ensures that the `verifier` command executes correctly,
    /// generating the expected output files.
    /// It also verifies that the preliminary `circuit`, `compile`, and `setup`
    /// commands are executed as required.
    #[test]
    fn test_verifier_command() {
        // Arrange: Ensure `circuit`, `compile`, and `setup` commands are executed
        let current_dir = std::env::current_dir().unwrap();
        execute_preliminary_commands();

        // Act: Execute the `verifier` command
        let mut cmd = Command::cargo_bin(env!("CARGO_PKG_NAME")).unwrap();
        cmd.arg("verifier").assert().success();

        // Assert: Check that the expected output file is created
        assert_file_created("verifier.sol");

        // Clean up generated files
        cleanup_files(&current_dir);
    }

    /// Executes the `circuit`, `compile`, and `setup` commands.
    ///
    /// This function ensures that the preliminary `circuit`, `compile`, and `setup`
    /// commands are executed successfully before testing the `verifier` command.
    fn execute_preliminary_commands() {
        let mut cmd = Command::cargo_bin(env!("CARGO_PKG_NAME")).unwrap();
        cmd.arg("circuit").assert().success();
        let mut cmd = Command::cargo_bin(env!("CARGO_PKG_NAME")).unwrap();
        cmd.arg("compile").assert().success();
        let mut cmd = Command::cargo_bin(env!("CARGO_PKG_NAME")).unwrap();
        cmd.arg("setup").assert().success();
    }

    /// Checks that the expected output file is created.
    ///
    /// This function verifies that the expected output file is created
    /// by the `verifier` command.
    fn assert_file_created(file: &str) {
        assert!(Path::new(file).exists(), "File {} does not exist", file);
    }

    /// Cleans up the generated files.
    ///
    /// This function deletes all the output files generated during the test,
    /// to ensure a clean state for subsequent tests or runs.
    fn cleanup_files(dir: &Path) {
        // List of files generated by preliminary commands
        let output_files = vec![
            "circuit.circom",
            "circuit.r1cs",
            "circuit.sym",
            "pot12_0000.ptau",
            "pot12_0001.ptau",
            "pot12_final.ptau",
            "circuit_0000.zkey",
            "circuit_0001.zkey",
            "verification_key.json",
            "verifier.sol",
        ];
        for file in output_files {
            let _ = fs::remove_file(file); // Ignore any deletion errors
        }
        // Also clean up any generated directories
        fs::remove_dir_all(dir.join("circuit_js")).unwrap();
    }
}
